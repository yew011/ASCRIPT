#!/bin/sh -u

# command line args.
ARGS=$@

# command to be executed.
CMD=

# directories.
OVS=.
LOG_PATH="/var/log/openvswitch/ovs-vswitchd.log"

# user specified options
CLANG=
SPARSE=
START=
DEBUG=

# configurable commands
BOOT="./boot.sh"
CONF="./configure"
CONF_FLAG="--localstatedir=/var --sysconfdir=/etc --enable-ssl \
           --with-linux=/lib/modules/`uname -r`/build"
MAKE="make -s -j8"
MINSTALL="make install"
KINSTALL="make modules_install ; /sbin/modprobe openvswitch"
CHECK="make check TESTSUITEFLAGS=-j8"
RMMOD="rmmod openvswitch; rmmod gre"
GCLEAN="git clean -fdx"
MCLEAN="make clean"
DCLEAN="make distclean"
KILL="killall -- ovs-vswitchd ovsdb-server"

# log function.
msg () {
    echo "$@" 1>&2
}

# helper function.
helper () {
    msg \
"""
Alex's ovs helper SCRIPT.


ascript [elog | vlog | kill | rmlog]

OPTIONS:
    elog:       emacs ovs-vswitchd.log.
    vlog:       vi ovs-vswitchd.log.
    rmlog:      rm ovs-vswitchd.log.
    etag:       create etags.

    rmmod:      remove the kernel modules.
    kill:       stop ovs.



ascript [DIRECTORY] [OPTIONS] [EXTRA CONFIG...]

DIRECTORY:
    the path to ovs directory.

OPTIONS:
    all:        rebuild everything and start ovs.
    boot:       boot.sh.
    conf:       configure.
    kernel:     install kernel module.
    make:       make and make install.
    check:      make check -j8.

    minst:      make install.
    kinst:      install kernal modules.

    gclean:     git clean -dfx.
    mclean:     make clean.
    dclean:     make distclean.

    start:      run ovs.
    debug:      start ovs in debug mode.

EXTRA CONFIGS:
    C=1:        use sparse.
    clang:      use clang.

EXAMPLES:
    ascript log
    ascript $PWD conf make clang
    ascript $PWD kernel C=1
    ascript $PWD start debug

NOTE:
    'all' will override other options.

Version 1.1
"""
}

# argument parser.
cmd_parse () {
    local all_in_one=

    # print help message.
    if [ `echo $ARGS | grep "\-h"` ] || [ `echo $ARGS | grep "\-\-help"` ]; then
	helper
	exit 0
    fi

    # for the first command format.
    case "$@" in
	*kill*)
	    CMD="$KILL"
	    return
	    ;;
	*elog*)
	    CMD="emacs $LOG_PATH"
	    return
	    ;;
	*vlog*)
	    CMD="vi $LOG_PATH"
	    return
	    ;;
	*etag*)
	    CMD=""
	    return
	    ;;
	*rmlog*)
	    CMD="rm $LOG_PATH"
	    return
	    ;;
	*rmmod*)
	    CMD="$RMMOD"
	    return
	    ;;

    esac

    # for the second command format.
    # check the ovs directory.
    if [ ! -d "$1" ]; then
	msg "[ERROR] no such file or directory $1."
	exit 2 #ENOENT
    fi
    OVS="$1"

    # parse clang/sparse option.
    case "$@" in
	*clang*)
	    CLANG="CC=clang"
	    ;;
	*"C=1"*)
	    SPARSE="C=1"
	    ;;
    esac

    all_in_one="$KILL ; $MCLEAN ; $DCLEAN ; $RMMOD ; $BOOT; \
                $CONF $CONF_FLAG $CLANG ; $MAKE $SPARSE 1>/dev/null; \
                $MINSTALL ; $KINSTALL ;"

    case "$@" in
	*all*)
            msg "[INFO] all-in-one command, make compile run ovs."
            CMD="$all_in_one"
	    START="true"
            return
	    ;;
	*kernel*)
	    msg "[INFO] make and install kernel module."
            CMD="$all_in_one"
	    return
	    ;;
    esac

    for option in $@
    do
	case "$option" in
	    "boot")
		CMD="$CMD $BOOT ;"
		;;
	    "conf")
		CMD="$CMD $CONF $CONF_FLAG $CLANG ;"
		;;
	    "make")
		CMD="$CMD $MAKE $SPARSE 1>/dev/null ;"
		;;
	    "check")
		CMD="$CMD $CHECK ;"
		;;
	    "gclean")
                CMD="$CMD $GCLEAN ;"
		;;
	    "mclean")
		CMD="$CMD $MCLEAN ;"
		;;
	    "dclean")
		CMD="$CMD $DCLEAN ;"
		;;
	    "minst")
		CMD="$CMD $MINSTALL ;"
		;;
	    "kinst")
		CMD="$CMD $KINSTALL ;"
		;;
	    "start")
		START="start"
		;;
	    "debug")
		DEBUG="debug"
		;;
        esac
    done
}

# run the command.
cmd_run () {
    eval "$CMD";
    find . -name "*.[cChH]" -print | etags -;
    if [ "$START" ]; then
	ovs_run "$OVS" "$DEBUG"
    fi
}

# run ovs.
ovs_run () {
    $KILL
    rm /etc/openvswitch/conf.db
    mkdir -p /etc/openvswitch
    ovsdb-tool create /etc/openvswitch/conf.db \
               $1/vswitchd/vswitch.ovsschema

    if [ $2 ]
    then
        ovsdb-server --detach --no-chdir --pidfile --log-file \
                     --remote=punix:/var/run/openvswitch/db.sock
        ovs-vswitchd --detach --no-chdir --pidfile \
                     --disable-system --log-file -vvconn -vofproto_dpif
    else
        NAME=ovsclient
        CERT_PFX=$1/pki
        rm -r $CERT_PFX
        mkdir $CERT_PFX

        cd $CERT_PFX
        ovs-pki --force init
        ovs-pki req+sign $NAME
        cd -

        ovsdb-server --remote=punix:/var/run/openvswitch/db.sock \
                     --remote=db:Open_vSwitch,Open_vSwitch,manager_options \
                     --private-key=db:Open_vSwitch,SSL,private_key \
                     --certificate=db:Open_vSwitch,SSL,certificate \
                     --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \
                     --detach --pidfile -vconsole:off --log-file

        ovs-vsctl --no-wait --bootstrap set-ssl $CERT_PFX/ovsclient-privkey.pem \
                                                $CERT_PFX/ovsclient-cert.pem \
                                                $CERT_PFX/vswitchd.cacert


        ovs-vswitchd --detach --pidfile -vconsole:off --log-file --enable-dummy

        VERSION=`ovs-vsctl --version | head -1 | sed -n "s/^.* \([0-9]*\.[0-9]*\.[0-9]*\)$/\1/p"`
        ovs-vsctl set O . ovs_version=$VERSION
    fi
}






############ THE 'MAIN' ##################

# check and parse the options.
cmd_parse $@

cd $OVS

# run command.
cmd_run

# clean up and exit.
cd -
exit 0
